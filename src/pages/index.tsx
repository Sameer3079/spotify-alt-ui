import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { sfPro, inter } from "./fonts";
import cx from "classnames";

import { api } from "~/utils/api";
import { Balancer } from "react-wrap-balancer";
import Spotify from "~/components/shared/icons/spotify";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const fontClass: string = cx(sfPro.variable, inter.variable);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={
          "flex min-h-screen flex-col items-center justify-center bg-white " +
          fontClass
        }
      >
        <h1 className="animate-fade-up bg-gradient-to-br from-black to-green-700 bg-clip-text py-5 text-center font-display text-4xl font-bold tracking-[-0.02em] text-transparent opacity-0 drop-shadow-sm md:text-7xl md:leading-[5rem]">
          <Balancer>Spotify Alternate UI</Balancer>
        </h1>
        <div className="mt-5 flex w-1/4 animate-fade-up justify-evenly opacity-0">
          <button className="flex items-center rounded-full bg-black px-4 py-2 text-green-500 shadow-none transition-all duration-500 hover:shadow-2xl">
            <Spotify className="mr-3 h-5 w-5" />
            <div>Join</div>
          </button>
          <button className="flex items-center rounded-full bg-black px-4 py-2 text-green-500 shadow-none transition-all duration-500 hover:shadow-2xl">
            <Spotify className="mr-3 h-5 w-5" />
            <div>Sign in</div>
          </button>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
